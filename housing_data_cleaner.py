# ----------------------------------------------------------------------
# Code generated by AI agent: data_cleaning_agent
# ----------------------------------------------------------------------

def clean_housing_data(data_raw):
    import pandas as pd
    import numpy as np
    from sklearn.impute import SimpleImputer

    # Step 1: Identify and Remove Columns with Excessive Missing Values
    missing_percentage = data_raw.isnull().mean()
    columns_to_drop = missing_percentage[missing_percentage > 0.4].index
    data_raw.drop(columns=columns_to_drop, inplace=True)

    # Step 2: Impute Missing Values for Numeric Columns
    numeric_cols = data_raw.select_dtypes(include=[np.number]).columns
    for col in numeric_cols:
        if data_raw[col].isnull().mean() < 0.2:
            median_value = data_raw[col].median()
            data_raw[col].fillna(median_value, inplace=True)

    # Step 3: Impute Missing Values for Categorical Columns
    categorical_cols = data_raw.select_dtypes(include=[object]).columns
    for col in categorical_cols:
        if data_raw[col].isnull().mean() < 0.4:  # Only impute if less than 40% missing
            mode_value = data_raw[col].mode()[0]
            data_raw[col].fillna(mode_value, inplace=True)

    # Step 4: Handle Outliers in Numeric Columns
    for col in numeric_cols:
        Q1 = data_raw[col].quantile(0.25)
        Q3 = data_raw[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 3 * IQR
        upper_bound = Q3 + 3 * IQR
        data_raw = data_raw[(data_raw[col] >= lower_bound) & (data_raw[col] <= upper_bound)]

    # Step 5: Convert Categorical Variables to Appropriate Types
    for col in categorical_cols:
        data_raw[col] = data_raw[col].astype('category')

    # Step 6: Ensure All Data Types are Appropriate
    for col in data_raw.columns:
        if data_raw[col].dtype == 'object':
            data_raw[col] = data_raw[col].astype('category')
        elif data_raw[col].dtype == 'float64':
            data_raw[col] = data_raw[col].astype('float')
        elif data_raw[col].dtype == 'int64':
            data_raw[col] = data_raw[col].astype('int')

    # Step 7: Remove Duplicate Rows
    data_raw.drop_duplicates(inplace=True)

    # Step 8: Final Review and Analysis
    if data_raw.isnull().sum().sum() == 0:
        print("No further actions are required. The dataset is clean.")
    else:
        print("There are still missing values in the dataset.")

    return data_raw