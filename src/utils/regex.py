"""
Regex utilities for AI Data Science.
"""

import re
import json
import textwrap

def relocate_imports_inside_function(code: str) -> str:
    """
    Relocate import statements inside a function if they are outside.
    
    Parameters
    ----------
    code : str
        The Python code as a string.
        
    Returns
    -------
    str
        The code with imports relocated inside the function.
    """
    # Find the first function definition
    function_match = re.search(r'def\s+\w+\s*\([^)]*\)\s*:', code)
    
    if function_match is None:
        return code  # No function definition found, return as is
        
    function_start = function_match.start()
    
    # Extract all import statements before the function
    import_statements = []
    for line in code[:function_start].split('\n'):
        if re.search(r'^\s*(?:import|from)\s+', line):
            import_statements.append(line.strip())
    
    if not import_statements:
        return code  # No imports to relocate
        
    # Get the code without imports
    code_without_imports = code
    for imp in import_statements:
        code_without_imports = code_without_imports.replace(imp + '\n', '')
        
    # Find the position after the function definition line
    post_def = re.search(r'def\s+\w+\s*\([^)]*\)\s*:\s*\n', code_without_imports)
    if post_def is None:
        return code  # Cannot find end of function definition
        
    post_def_end = post_def.end()
    
    # Check for existing indentation in the function body
    next_line_match = re.search(r'\n(\s+)', code_without_imports[post_def_end:])
    if next_line_match:
        indent = next_line_match.group(1)
    else:
        indent = '    '  # Default indentation
        
    # Insert imports after function definition
    imports_text = '\n'.join([indent + imp for imp in import_statements]) + '\n'
    code_with_imports = (
        code_without_imports[:post_def_end] + 
        imports_text + 
        code_without_imports[post_def_end:]
    )
    
    return code_with_imports

def add_comments_to_top(code: str, agent_name: str = None) -> str:
    """
    Add informative comments to the top of the code.
    
    Parameters
    ----------
    code : str
        The Python code as a string.
    agent_name : str, optional
        The name of the agent generating the code.
        
    Returns
    -------
    str
        The code with comments added at the top.
    """
    header = "# " + "-" * 70 + "\n"
    
    if agent_name:
        header += f"# Code generated by AI agent: {agent_name}\n"
        
    header += "# " + "-" * 70 + "\n\n"
    
    return header + code

def format_agent_name(agent_name: str) -> str:
    """
    Format agent name for display.
    
    Parameters
    ----------
    agent_name : str
        The name of the agent.
        
    Returns
    -------
    str
        Formatted agent name.
    """
    return f"ðŸ¤– {agent_name.upper()}"

def format_recommended_steps(steps: str, heading: str = "# Recommended Steps:") -> str:
    """
    Format recommended steps with a heading.
    
    Parameters
    ----------
    steps : str
        The recommended steps as a string.
    heading : str, optional
        The heading to add before the steps.
        
    Returns
    -------
    str
        Formatted steps with heading.
    """
    return f"{heading}\n\n{steps}"

def get_generic_summary(data: dict) -> str:
    """
    Generate a generic summary for agent outputs.
    
    Parameters
    ----------
    data : dict
        The data to summarize.
        
    Returns
    -------
    str
        A formatted summary.
    """
    if not data:
        return "No data available."
        
    summary = []
    
    if "recommended_steps" in data:
        summary.append(f"### Recommended Steps\n{data['recommended_steps']}")
    
    if "data_cleaner_function" in data:
        code_sample = data["data_cleaner_function"]
        if len(code_sample) > 500:
            code_sample = code_sample[:500] + "...\n(truncated for display)"
        summary.append(f"### Generated Code\n```python\n{code_sample}\n```")
    
    if "data_cleaner_function_path" in data:
        summary.append(f"### Function Path\n{data['data_cleaner_function_path']}")
    
    if "data_cleaner_error" in data and data["data_cleaner_error"]:
        summary.append(f"### Errors\n{data['data_cleaner_error']}")
    
    return "\n\n".join(summary) 